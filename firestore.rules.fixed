rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions with corrected names (no conflicts with reserved words)
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function userDocExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function getUserDoc(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
    
    function isPublicUser(userId) {
      return isAuthenticated() && 
        userDocExists(userId) &&
        getUserDoc(userId).data.get('isPublic', false) == true;
    }
    
    // Users collection - FIXED RULES
    match /users/{userId} {
      // Allow read if user owns the document OR if it's a public profile
      allow read: if isAuthenticated() && 
        (isOwner(userId) || 
         (userDocExists(userId) && getUserDoc(userId).data.get('isPublic', false) == true));
      
      // Allow write only if user owns the document
      allow write: if isOwner(userId);
      
      // User decks subcollection
      match /decks/{deckId} {
        allow read: if isAuthenticated() && 
          (isOwner(userId) || resource.data.get('visibility', 'private') == 'public');
        allow create: if isOwner(userId) && 
          request.resource.data.ownerId == request.auth.uid;
        allow update, delete: if isOwner(userId);
      }
      
      // User activity subcollection
      match /activity/{activityId} {
        allow read, write: if isOwner(userId);
      }
      
      // User completed lessons subcollection
      match /completedLessons/{lessonId} {
        allow read, write: if isOwner(userId);
      }
      
      // User recommendations subcollection
      match /recommendations/{recommendationId} {
        allow read, write: if isOwner(userId);
      }
      
      // User preferences subcollection
      match /preferences/{preferenceId} {
        allow read, write: if isOwner(userId);
      }
      
      // User journeys subcollection
      match /journeys/{journeyId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Education content collection - public read access
    match /educationContent/{contentId} {
      allow read: if true; // Public read access for all users
      allow write: if false; // Only Cloud Functions can write
    }

    // Community podcasts collection - public read access
    match /communityPodcasts/{weekNumber} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions can write
    }

    // Cards collection for content discovery
    match /cards/{cardId} {
      allow read: if true; // Public read access for discovery
      allow write: if false; // Only Cloud Functions can write
    }

    // Competitions collection
    match /competitions/{competitionId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions can write
      
      // Competition entries subcollection
      match /entries/{userId} {
        allow read: if isAuthenticated() && 
          (isOwner(userId) || 
           exists(/databases/$(database)/documents/competitions/$(competitionId)/entries/$(request.auth.uid)));
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update: if isOwner(userId);
      }
    }

    // Legacy collections for backward compatibility
    match /decks/{deckId} {
      allow read: if isAuthenticated() && 
        (resource.data.get('visibility', 'private') == 'public' || 
         isOwner(resource.data.ownerId));
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.ownerId);
    }

    // Card notes collection with subcollections
    match /card_notes/{cardId} {
      allow read: if isAuthenticated();
      
      // Notes subcollection
      match /notes/{noteId} {
        allow read: if isAuthenticated() && 
          (resource.data.get('visibility', 'private') == 'public' || isOwner(resource.data.authorId));
        allow create: if isAuthenticated() && 
          request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
        
        // Comments on notes
        match /comments/{commentId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && 
            request.resource.data.authorId == request.auth.uid;
          allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);
        }
        
        // Likes on notes
        match /likes/{likeId} {
          allow read: if isAuthenticated();
          allow create, delete: if isAuthenticated() && 
            request.resource.data.userId == request.auth.uid;
        }
      }
    }

    // Shares collection
    match /shares/{shareId} {
      allow read: if isAuthenticated() && 
        (resource.data.sharedWith == null || 
         request.auth.uid in resource.data.get('sharedWith', []) ||
         isOwner(resource.data.sharedBy));
      allow create: if isAuthenticated() && 
        request.resource.data.sharedBy == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.sharedBy);
    }

    // Friends collection
    match /friends/{friendId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow create: if isAuthenticated() && 
        request.resource.data.fromUserId == request.auth.uid;
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
    }

    // Strategies collection
    match /strategies/{strategyId} {
      allow read: if isAuthenticated() && 
        (resource.data.get('isPublic', false) == true || isOwner(resource.data.ownerId));
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.ownerId);
      
      // Backtests subcollection
      match /backtests/{backtestId} {
        allow read, write: if isAuthenticated() && 
          isOwner(get(/databases/$(database)/documents/strategies/$(strategyId)).data.ownerId);
      }
    }

    // Alerts collection - user-specific
    match /alerts/{userId} {
      allow read, write: if isOwner(userId);
      
      // Individual alert items
      match /items/{alertId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Challenges collection
    match /challenges/{challengeId} {
      allow read: if isAuthenticated() && 
        (resource.data.get('isPublic', false) == true || 
         isOwner(resource.data.creatorId) ||
         exists(/databases/$(database)/documents/challenges/$(challengeId)/participants/$(request.auth.uid)));
      allow create: if isAuthenticated() && 
        request.resource.data.creatorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && isOwner(resource.data.creatorId);
      
      // Participants subcollection
      match /participants/{participantId} {
        allow read: if isAuthenticated() && 
          (isOwner(resource.data.userId) ||
           isOwner(get(/databases/$(database)/documents/challenges/$(challengeId)).data.creatorId));
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid;
        allow update: if isAuthenticated() && 
          (isOwner(resource.data.userId) ||
           isOwner(get(/databases/$(database)/documents/challenges/$(challengeId)).data.creatorId));
      }
      
      // Results subcollection - only Cloud Functions can write
      match /results/{resultId} {
        allow read: if isAuthenticated() && 
          exists(/databases/$(database)/documents/challenges/$(challengeId)/participants/$(request.auth.uid));
        allow write: if false; // Only Cloud Functions
      }
    }

    // Newsletters collection - user-specific
    match /newsletters/{userId} {
      allow read, write: if isOwner(userId);
      
      // Individual newsletter items
      match /items/{newsletterId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Podcasts collection - user-specific (legacy)
    match /podcasts/{podcastId} {
      allow read, write: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || 
         request.auth.uid == 'demo-user-123');
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
    }

    // Notifications collection - user-specific
    match /notifications/{userId} {
      allow read, write: if isOwner(userId);
      
      // Individual notification items
      match /items/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Analytics and admin collections - restrict access
    match /analytics/{document=**} {
      allow read, write: if false; // Only Cloud Functions
    }
    
    match /admin/{document=**} {
      allow read, write: if false; // Only admin users via Cloud Functions
    }
    
    // System collections for metadata
    match /system/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions
    }
    
    // Allow all other collections with basic authentication
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}
